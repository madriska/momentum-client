#!/usr/bin/env ruby

require "optparse"
require "pathname"
require "highline"
require "fileutils"
require "fastercsv"
require "#{File.dirname(__FILE__)}/../lib/turbine"

def config_dir(dir = Pathname.new("."))
  turbine_dir = dir + ".turbine"
  if dir.children.include?(turbine_dir)
    turbine_dir.expand_path
  else
    return nil if dir.expand_path.root?
    config_dir(dir.parent)
  end
end

opts   = OptionParser.new
params = {}
cli    = HighLine.new

opts.on("-m", "=MSG", String) do |msg|
  params[:message] = msg
end

command = opts.parse(*ARGV).first

if command == "init"
  FileUtils.mkdir_p(".turbine")
  FileUtils.mkdir_p(".turbine/log")
  
  user    = cli.ask("user:  ")
  client  = cli.ask("client: ")
  project = cli.ask("project: ")

  FasterCSV.open(".turbine/log/#{user}.csv", "w") do |csv|
    csv << ["date", "client", "project", "message", "duration"]
  end

  File.open(".turbine/config.rb", "w") do |f|
    f << %{Turbine.user    = '#{user}'
Turbine.client  = '#{client}'
Turbine.project = '#{project}'
}
  end
  exit
end

unless turbine_dir = config_dir
  cli.say "Cannot find config file.  Did you forget to run turbine init?"
  exit
end

require "#{turbine_dir}/config.rb"

case command
when "start"
  timer = Turbine::Timer.new(turbine_dir)
  if timer.running?
    cli.say "Timer already started, please stop first"
  else
    timer.write_timestamp
    cli.say "Timer started at #{Time.now}"
  end
when "stop"
  timer = Turbine::Timer.new(turbine_dir)
  if timer.running?
    begin
      duration = cli.ask("Time to enter (CTRL-C to cancel): ", Float) do |q|
        q.default = ("%0.2f" % timer.elapsed_time).to_f
      end

      queue = Turbine::Queue.new(turbine_dir)
      queue << duration

      timer.clear_timestamp
    rescue Interrupt
      cli.say("\n")
    end
  else
    cli.say "ERROR: Timer was not running."
  end
when "commit"
  if message = params[:message]
    queue = Turbine::Queue.new(turbine_dir)
    duration = queue.compute.to_s

    if queue.empty?
      cli.say "ERROR: No entries!"
      exit
    end

    FasterCSV.open("#{turbine_dir}/log/#{Turbine.user}.csv", "a") do |csv|
      csv << [Date.today.strftime("%Y.%m.%d"), Turbine.client, Turbine.project, message, duration]
    end

    puts "Committed time entry totaling #{duration} hrs"

    queue.clear
  else
    cli.say "You need to supply a message"
  end
end

